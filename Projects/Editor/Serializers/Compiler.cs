// Copyright 2016-2017 ?????????????. All Rights Reserved.
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using VisualScriptTool.Language.Statements;
using VisualScriptTool.Language.Statements.Control;
using VisualScriptTool.Language.Statements.Declaration.Variables;
using VisualScriptTool.Serialization;

namespace VisualScriptTool.Editor.Serializers
{
	static class Compiler
	{
		public static void Compile()
		{
			ICompileStrategy defaultCompilerStrategy = new DefaultCompileStrategy();
			ICompileStrategy systemCompilerStrategy = new SystemCompilerStrategy();

			Dictionary<Type, ICompileStrategy> types = new Dictionary<Type, ICompileStrategy>();
			types[typeof(Slot)] = defaultCompilerStrategy;
			types[typeof(Statement)] = defaultCompilerStrategy;
			types[typeof(IfStatement)] = defaultCompilerStrategy;
			types[typeof(ForStatement)] = defaultCompilerStrategy;
			types[typeof(BooleanVariable)] = defaultCompilerStrategy;
			types[typeof(IntegerVariable)] = defaultCompilerStrategy;
			types[typeof(FloatVariable)] = defaultCompilerStrategy;
			types[typeof(StringVariable)] = defaultCompilerStrategy;

			types[typeof(StatementInstance)] = defaultCompilerStrategy;
			types[typeof(IfStatementInstance)] = defaultCompilerStrategy;
			types[typeof(ForStatementInstance)] = defaultCompilerStrategy;
			types[typeof(VariableStatementInstance)] = defaultCompilerStrategy;

			types[typeof(PointF)] = systemCompilerStrategy;
			types[typeof(SizeF)] = systemCompilerStrategy;


			SerializerCompiler compiler = new SerializerCompiler();

			StringBuilder serializationCode = new StringBuilder();
			serializationCode.AppendLine("// This file has generated by Compiler, do not change it manually");
			serializationCode.AppendLine("namespace VisualScriptTool.Editor.Serializers");
			serializationCode.AppendLine("{");
			serializationCode.AppendLine("\tstatic class SerializationSystem");
			serializationCode.AppendLine("\t{");
			serializationCode.AppendLine("\t\tpublic static void Initialize()");
			serializationCode.AppendLine("\t\t{");

			Dictionary<Type, ICompileStrategy>.Enumerator it = types.GetEnumerator();
			while (it.MoveNext())
			{
				compiler.Strategy = it.Current.Value;

				File.WriteAllText(Application.StartupPath + "/../Editor/Serializers/" + it.Current.Key.Name + "_Serializer.cs", compiler.Compile(it.Current.Key, "VisualScriptTool.Editor.Serializers"));

				serializationCode.AppendLine("\t\t\tSerialization.Creator.AddSerializer(new " + it.Current.Key.Name  + "_Serializer());");
			}

			serializationCode.AppendLine("\t\t}");
			serializationCode.AppendLine("\t}");
			serializationCode.AppendLine("}");

			File.WriteAllText(Application.StartupPath + "/../Editor/Serializers/SerializationSystem.cs", serializationCode.ToString());
		}
	}
}
